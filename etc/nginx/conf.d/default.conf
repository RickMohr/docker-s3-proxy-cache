proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=the_zone:10m inactive=60m max_size=2g;

server {
    listen 80;

    # Re-resolve s3.amazonaws.com so that we aren't always
    # hitting the same server.
    resolver 8.8.8.8 valid=60s;
    resolver_timeout 10s;

    location / {
        # Only allow GET and HEAD requests.
        limit_except GET HEAD {
            deny all;
        }

        # AWS SDKs attempt to connect to:
        #
        #   http://<BUCKET>.s3.amazonaws.com/<OBJECT>
        #
        proxy_pass http://<BUCKET>.s3.amazonaws.com;

        aws_access_key <ACCESS_KEY>;
        aws_secret_key <SECRET_KEY>;
        s3_bucket <BUCKET>;

        # ngx_aws_auth provides the $s3_auth_token variable, which
        # contains the authorization header necessary to authorize
        # the backend S3 request:
        #
        #  AWS <ACCESS_KEY>:<REQUEST_SIGNATURE>
        #
        proxy_set_header Authorization $s3_auth_token;
        proxy_set_header x-amz-date $aws_date;

        # Mimic request headers that are set and not set by original
        # SDK connections.
        proxy_set_header Connection '';
        proxy_set_header Accept-Encoding identity;

        # Make connection to S3 using HTTP/1.1
        proxy_http_version 1.1;

        # Disable automatic HEAD to GET conversion by Nginx for caching
        # purposes. Afterwards, tweak the cache key so that it includes
        # the request method (creates separate entries for HEAD and GET
        # requests for the same resource).
        proxy_cache_convert_head off;
        proxy_cache_key $request_method$proxy_host$request_uri;

        # Buffer responses from S3 until we have it all. Disabling this
        # feature makes it so that the response is passed through to the
        # client synchronously.
        proxy_buffering on;

        proxy_cache the_zone;
        proxy_cache_valid 200 24h;

        # Use X-Cached header to signal to clients when requests are
        # cache HITS vs cache MISSES.
        add_header X-Cached $upstream_cache_status;
    }
}
